name: ArXiv AutoSumm Daily

on:
  schedule:
    # Run daily at 00:00 UTC (adjust as needed)
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      category:
        description: 'ArXiv category to process (optional, overrides config, single category only)'
        required: false
        default: ''

jobs:
  run-arxiv-autosumm:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache ArXiv Paper Database
      uses: actions/cache@v4
      with:
        path: ~/.cache/arxiv-autosumm/
        key: arxiv-cache-v4-${{ github.run_id }}-${{ hashFiles('config.yaml') || 'no-config' }}
        restore-keys: |
          arxiv-cache-v4-${{ github.run_id }}-
          arxiv-cache-v4-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          texlive-latex-base \
          texlive-latex-extra \
          texlive-xetex \
          pandoc \
          calibre \
          curl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Export repository variables and secrets
      run: |
        # Export repository variables (this makes USE_REPO_CONFIG available for workflow condition)
        .github/scripts/export-env.sh "${{ toJSON(vars) }}"

        # Export Group A Secrets (Option A secrets)
        echo "ARXIV_CATEGORIES=${{ secrets.ARXIV_CATEGORIES }}" >> $GITHUB_ENV
        echo "MAX_PAPERS=${{ secrets.MAX_PAPERS }}" >> $GITHUB_ENV
        echo "OUTPUT_FORMATS=${{ secrets.OUTPUT_FORMATS }}" >> $GITHUB_ENV
        echo "RATING_STRATEGY=${{ secrets.RATING_STRATEGY }}" >> $GITHUB_ENV
        echo "SUMMARIZER_PROVIDER=${{ secrets.SUMMARIZER_PROVIDER }}" >> $GITHUB_ENV
        echo "SUMMARIZER_API_KEY=${{ secrets.SUMMARIZER_API_KEY }}" >> $GITHUB_ENV
        echo "SUMMARIZER_BASE_URL=${{ secrets.SUMMARIZER_BASE_URL }}" >> $GITHUB_ENV
        echo "SUMMARIZER_MODEL=${{ secrets.SUMMARIZER_MODEL }}" >> $GITHUB_ENV
        echo "RATER_PROVIDER=${{ secrets.RATER_PROVIDER }}" >> $GITHUB_ENV
        echo "RATER_API_KEY=${{ secrets.RATER_API_KEY }}" >> $GITHUB_ENV
        echo "RATER_BASE_URL=${{ secrets.RATER_BASE_URL }}" >> $GITHUB_ENV
        echo "RATER_MODEL=${{ secrets.RATER_MODEL }}" >> $GITHUB_ENV
        echo "SMTP_SERVER=${{ secrets.SMTP_SERVER }}" >> $GITHUB_ENV
        echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> $GITHUB_ENV
        echo "SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}" >> $GITHUB_ENV
        echo "RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }}" >> $GITHUB_ENV
        echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> $GITHUB_ENV
        echo "âœ… Group A secrets export completed"

        # Export Group B Secrets (provider API keys)
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
        echo "COHERE_API_KEY=${{ secrets.COHERE_API_KEY }}" >> $GITHUB_ENV
        echo "DASHSCOPE_API_KEY=${{ secrets.DASHSCOPE_API_KEY }}" >> $GITHUB_ENV
        echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}" >> $GITHUB_ENV
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV
        echo "MINIMAX_API_KEY=${{ secrets.MINIMAX_API_KEY }}" >> $GITHUB_ENV
        echo "MODELSCOPE_API_KEY=${{ secrets.MODELSCOPE_API_KEY }}" >> $GITHUB_ENV
        echo "MOONSHOT_API_KEY=${{ secrets.MOONSHOT_API_KEY }}" >> $GITHUB_ENV
        echo "OLLAMA_API_KEY=${{ secrets.OLLAMA_API_KEY }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> $GITHUB_ENV
        echo "SILICONFLOW_API_KEY=${{ secrets.SILICONFLOW_API_KEY }}" >> $GITHUB_ENV
        echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}" >> $GITHUB_ENV
        echo "ARK_API_KEY=${{ secrets.ARK_API_KEY }}" >> $GITHUB_ENV
        echo "ZHIPU_API_KEY=${{ secrets.ZHIPU_API_KEY }}" >> $GITHUB_ENV
        echo "âœ… Group B secrets export completed"

        # Export Custom Secrets (manually added)
        echo "âœ… Custom secrets export completed"

        echo "âœ… Repository variables and secrets export completed"

    - name: Create config from environment (if needed)
      if: env.USE_REPO_CONFIG != 'true' || hashFiles('config.yaml') == ''
      run: |
        # Run the config generation script
        .github/scripts/create-config.sh

    - name: Ensure cache directory exists
      run: |
        mkdir -p ~/.cache/arxiv-autosumm/

    - name: Extract output directory from config
      id: extract_output
      run: |
        if [ -f "config.yaml" ]; then
          # Try to extract output_dir from render section
          OUTPUT_DIR=$(grep -A5 "render:" config.yaml | grep "output_dir" | sed 's/.*output_dir: *//' | tr -d '"' | tr -d "'" || echo "./output")
          # Fallback to ./output if extraction fails
          if [ -z "$OUTPUT_DIR" ]; then
            OUTPUT_DIR="./output"
          fi
        else
          OUTPUT_DIR="./output"
        fi
        echo "OUTPUT_DIR=$OUTPUT_DIR" >> $GITHUB_ENV
        echo "Extracted output directory: $OUTPUT_DIR"

    - name: Validate configuration
      run: |
        python -m autosumm.cli run --config config.yaml --test

    - name: Run ArXiv AutoSumm
      run: |
        if [ "${{ github.event.inputs.category }}" != "" ]; then
          echo "Running with specified category: ${{ github.event.inputs.category }}"
          python -m autosumm.cli run --config config.yaml --specify-category "${{ github.event.inputs.category }}"
        else
          echo "Running with default categories from config"
          python -m autosumm.cli run --config config.yaml
        fi

    - name: Upload outputs as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: arxiv-summaries-${{ github.run_number }}
        path: |
          ${{ env.OUTPUT_DIR }}/**/*
          logs/
        retention-days: 30
        if-no-files-found: warn

    - name: Get current date for release
      if: success() && github.event_name == 'schedule'
      id: date
      run: |
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "formatted_date=$(date +'%B %d, %Y')" >> $GITHUB_OUTPUT

    - name: Create Daily Release (scheduled runs only)
      if: success() && github.event_name == 'schedule'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: daily-${{ github.run_number }}
        name: ArXiv Summaries - ${{ steps.date.outputs.date }} - Run ${{ github.run_number }}
        body: |
          Automated ArXiv paper summaries generated on ${{ steps.date.outputs.formatted_date }}

          ## Files
          This release contains the generated summary files for today's ArXiv papers.
        files: |
          ${{ env.OUTPUT_DIR }}/**/*
        draft: false
        prerelease: false
        generate_release_notes: false
        
    - name: Clean up old releases and workflow runs
      if: github.event_name == 'schedule'
      run: |
        echo "ðŸ§¹ Cleaning up old releases..."
        # Keep only the last 7 daily releases to avoid clutter
        gh release list --limit 50 | grep "daily-" | tail -n +8 | cut -f1 | xargs -r gh release delete -y

        echo "ðŸ§¹ Cleaning up old workflow runs..."
        # Keep completed runs from the last 7 days, delete older ones
        # This preserves recent successful runs while cleaning up old completed runs
        gh run list --limit 50 --json status,conclusion,databaseId,number,createdAt | \
        jq -r '.[] | select(
          .status == "completed" and
          (.createdAt | fromdateiso8601) < (now - 7*24*3600)
        ) | .databaseId' | \
        while read run_id; do
          if [ -n "$run_id" ]; then
            echo "Deleting workflow run: $run_id"
            gh run delete "$run_id" --yes 2>/dev/null || echo "Failed to delete run $run_id (may not exist)"
          fi
        done

        echo "âœ… Cleanup completed"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}